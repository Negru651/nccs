---
title: "nccsdata Part 3: Geographic Filters"
date: 2023-11-03
description: "Part 3 of 4 data stories covering the nccsdata R package. This story focuses on working with Census FIPS codes."
featured: true
featuredOrder: 4
primaryCtaUrl: https://urbaninstitute.github.io/nccsdata
primaryCtaText: Package Website
format: gfm
type: methods
categories:
  - R packages
author:
  - id: thiya
citation: 
  container-title: National Center for Charitable Statistics
  volume: 1
  issue: 1
links:
  - header: Data Stories in this series
    links:
    - text: "Part 1: Downloading Data"
      href: https://urbaninstitute.github.io/nccs/stories/nccsdata/
      icon: article
    - text: "Part 2: NTEE Codes"
      href: https://urbaninstitute.github.io/nccs/stories/nccsdata-ntee/
      icon: article
    - text: "Part 3: Geographic Filters"
      href: https://urbaninstitute.github.io/nccs/stories/nccsdata-geo/
      icon: article
    - text: "Part 4: Summarising Data"
      href: https://urbaninstitute.github.io/nccs/stories/nccsdata-summary/
      icon: article
  - header: "Related Datasets"
    links:
    - text: "Census Crosswalks"  
    - href: https://urbaninstitute.github.io/nccs/datasets/census/
    - icon: article
  - header: Package Links
    links:
    - text: Github Repository
      href: https://github.com/UrbanInstitute/nccsdata
      icon: github
    - text: Package Reference
      href: https://urbaninstitute.github.io/nccsdata/reference/index.html
      icon: link
    - text: Relevant Vignette
      href: https://urbaninstitute.github.io/nccsdata/articles/geo.html
      icon: article
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.align = "center"
)
library( nccsdata )
library( dplyr )
```

## Introduction

In part 3 of this 4-part series on the [`nccsdata`](https://urbaninstitute.github.io/nccsdata/) package, we cover how to filter downloaded NCCS data based on geography.

Legacy NCCS data consists of several geographic variables, such as:

 * `STATE`: 2 letter state abbreviation (all caps)
 * `CITY`: Name of the city associated with the address provided in `ADDRESS` (all caps)
 * `FIPS`: [State + County FIPS codes](https://transition.fcc.gov/oet/info/maps/census/fips/fips.txt) (CBSA) as used by the US Census (five-digit integer)
 
The last variable, *FIPS*, can be used to match observations based on census units. This preserves the external validity of geographic units by aligning them with US census delineations.

In US census data, *FIPS* are also tied to Core Based Statistical Areas (CBSAs) that consist of mutually exclusive Metropolitan Statistical Areas (metros with populations above 50,000) and Micropolitan Statistical Areas (populations above 10,000 and below 50,000).
Geographic filtering with US census units therefore requires crosswalking units across multiple levels, such as county and CBSA. 

> Further details and examples of CBSAs and Metropolitan/Micropolitan Statistical Areas are provided on the Census Crosswalks  [page](https://urbaninstitute.github.io/nccs/datasets/census/) of the Urban NCCS Site. 


All Census-defined metro areas are comprised of counties. This vignette explores the process of filtering nonprofit data by geography using [`geo_preview()`](https://urbaninstitute.github.io/nccsdata/reference/geo_preview.html) and [`map_countyfips()`](https://urbaninstitute.github.io/nccsdata/reference/map_countyfips.html) to identify the County FIPS associated with specific Metropolitan or Micropolitan Regions.  

<img src="https://raw.githubusercontent.com/UrbanInstitute/nccs/main/_datasets/img/csa-vs-cbsa.png">

## Exploring CBSA FIPS Codes

The [`geo_preview()`](https://urbaninstitute.github.io/nccsdata/reference/geo_preview.html) function allows users to preview and retrieve CBSA FIPS codes and/or their associated metadata from a specific state. 

```{r}
geo_preview( 
  geo    = c("cbsa","cbsafips"), 
  within = "FL", 
  type   = "metro" )
```

Specifically, filtering on geography requires using GEOIDs (the FIPS codes associated with a specific level of geo aggregation). This is because (1) city and county names are non-unique, and (2) they are long and would be easy to misspell. The **geo_preview()** function offers a convenient way to identify all of the GEOIDs associated with your desired geography.  

The code snippet above demonstrates that  [`geo_preview()`](https://urbaninstitute.github.io/nccsdata/reference/geo_preview.html) returns the names of all CBSAs and their associated GEOIDs. The **within** argument specifies the desired state, in abbreviated form, as input while the **geo** argument returns the specified columns. The **type** argument specified which type of geography is desired. 

The **geo** argument allows uses to select a variety of columns from the geographic crosswalk file.

```{r}
geo_preview(
  geo    = c("cbsa","county","cbsafips"), 
  within = "FL", 
  type   = "metro"  )
```

## Metropolitan and Micropolitan Data

Because CBSAs include combinations of [metropolitan or micropolitan statistical areas](https://www.census.gov/programs-surveys/metro-micro/about.html), [`geo_preview()`](https://urbaninstitute.github.io/nccsdata/reference/geo_preview.html) allows the user to select either unit using the `type` argument.

The following code snippet shows how to retrieve CBSA names and FIPS codes for all metropolitan statistical areas in Wyoming:

```{r}
geo_preview(
  geo    = c("cbsa","cbsafips"), 
  within = "WY", 
  type   = "metro" )
```

In the above snippet, setting **type** to **micro** returns data for micropolitan statistical areas.

```{r}
geo_preview( 
  geo    = c("cbsa","cbsafips"), 
  within = "WY", 
  type   = "micro" )
```

## Exploring CSA FIPS

Core Based Statistical Areas (CBSAs) delineate the distinct metropolitan areas. The Combined Statistical Areas (CSA) geography aggregates the data further into metropolital regions where multiple cities function as a coherent entities, typically characterized by shared commercial and commuting zones. 

Similar to how metro areas area comprised of a collection of counties, you can think of the Combined Statistical Areas as being comprised of collections of metropolitan and micropolitan areas.


```
939 Core-Based Statistical Areas =
    384 Metropolitan statistical areas +
    547 micropolitan statistical areas

175 Total Combined Statistical Areas:
    808 Metro + Micro Areas joined together to form CSAs
    123 Metro + Micro Areas are not part of any CSA
```

[`geo_preview()`](https://urbaninstitute.github.io/nccsdata/reference/geo_preview.html) can retrieve metadata for [Combined Statistical Areas](https://en.wikipedia.org/wiki/Combined_statistical_area) (CSAs).

The code snippet below returns all CSA names and FIPS codes for metropolitan statistical areas in Virginia:

```{r}
geo_preview(
  geo    = c("csa","csafips"), 
  within = "VA", 
  type   = "metro")
```

## Filtering Legacy Data with County FIPS codes

After retrieving the desired CBSA/CSA FIPS codes, [`map_countyfips()`](https://urbaninstitute.github.io/nccsdata/reference/map_countyfips.html) can match them with county FIPS codes present in the legacy data, retrieved with [`get_data()`](https://urbaninstitute.github.io/nccsdata/reference/get_data.html). Downloaded data can then be filtered using these county FIPS codes, as shown below:

```{r}
# Retrive CBSA FIPS from NY
cbsa_ny <- 
  geo_preview( geo = c("cbsa", "cbsafips"), 
               within = "NY" )

# Map these to county FIPS codes
ny_countyfips <- 
  map_countyfips( geo.cbsafips = cbsa_ny$cbsafips )

# Pull core data for the year 2015
core_2015 <- 
  get_data( dsname         = "core",
            time           = "2015",
            scope.orgtype  = "NONPROFIT",
            scope.formtype = "PZ" )

# Filter with NY county FIPS
core_2015_nyfips <- 
  core_2015 %>% 
  dplyr::filter( FIPS %in% ny_countyfips )

print( as_tibble( core_2015_nyfips ))
```

## Conclusion

Using FIPS codes allows researchers working with NCCS data to standardize their operationalized geographic variables, resulting in greater external validity and reproducibility in their research. 

